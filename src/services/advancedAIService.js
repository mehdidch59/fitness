/**
 * Service IA Avanc√©e pour fonctionnalit√©s intelligentes
 */

import { mistralService } from './mistralService';
import { JSONParsingUtils } from '../utils/JSONParsingUtils';

class AdvancedAIService {
  constructor() {
    this.mistralService = mistralService;
    this.userPreferences = new Map();
    this.moodHistory = new Map();
    this.seasonalIngredients = this.initSeasonalData();
  }

  // === Contexte profil et alignement objectif ===
  buildProfileContext(userProfile = {}) {
    const goal = userProfile.goal || 'maintain';
    const gender = userProfile.gender || 'non sp√©cifi√©';
    const age = userProfile.age || 'NA';
    const weight = userProfile.weight || 'NA';
    const height = userProfile.height || 'NA';
    const activity = userProfile.activityLevel || 'mod√©r√©';
    const diet = userProfile.dietType || 'omnivore';
    return `Objectif: ${goal}\nGenre: ${gender}\n√Çge: ${age}\nPoids: ${weight}kg\nTaille: ${height}cm\nActivit√©: ${activity}\nR√©gime: ${diet}`;
  }

  getGoalGuidelines(goal = 'maintain', userProfile = {}) {
    const weight = Number(userProfile.weight || 70);
    const proteinPerKg = goal === 'gain_muscle' ? 1.6 : goal === 'lose_weight' ? 1.5 : 1.2;
    const proteinTarget = Math.round(proteinPerKg * weight);
    const perMealProtein = Math.max(20, Math.round(proteinTarget / 3));
    const calorieRanges = {
      gain_muscle: [500, 800],
      lose_weight: [300, 550],
      maintain: [400, 700],
    };
    const range = calorieRanges[goal] || calorieRanges.maintain;
    return { perMealProtein, calorieRange: range };
  }

  scoreRecipeForGoal(recipe, goal = 'maintain', userProfile = {}) {
    const { perMealProtein, calorieRange } = this.getGoalGuidelines(goal, userProfile);
    const protein = Number(recipe?.protein || 0);
    const calories = Number(recipe?.calories || 0);
    const proteinScore = Math.max(0, Math.min(60, ((protein - perMealProtein) / perMealProtein) * 60 + 30));
    const [minC, maxC] = calorieRange;
    let calScore = 0;
    if (calories >= minC && calories <= maxC) {
      calScore = 40;
    } else if (calories > 0) {
      const dist = calories < minC ? (minC - calories) : (calories - maxC);
      const scale = Math.max(minC, 1);
      calScore = Math.max(0, 40 - (dist / scale) * 40);
    }
    return Math.round(Math.max(0, Math.min(100, proteinScore + calScore)));
  }

  adaptRecipesToGoal(recipes = [], userProfile = {}) {
    const goal = userProfile.goal || 'maintain';
    const scored = (recipes || []).map(r => ({ ...r, goalFitScore: this.scoreRecipeForGoal(r, goal, userProfile) }));
    scored.sort((a, b) => (b.goalFitScore || 0) - (a.goalFitScore || 0));
    return scored;
  }

  /**
   * üì∏ SCANNER DE FRIGO - Photo ‚Üí Recettes
   */
  async scanFridgeAndGenerateRecipes(imageData, userProfile) {
    try {
      console.log('üì∏ Analyse du frigo en cours...');
      
      // Simulation d'analyse d'image (√† remplacer par un vrai service de vision)
      const detectedIngredients = await this.mockImageAnalysis(imageData);
      
      const prompt = `Tu es un chef IA. Analyse ces ingr√©dients disponibles et cr√©e 3 recettes cr√©atives et nutritives.

INGR√âDIENTS D√âTECT√âS: ${detectedIngredients.join(', ')}

PROFIL UTILISATEUR:
${this.buildProfileContext(userProfile)}

Contraintes:
- Utiliser UNIQUEMENT les ingr√©dients d√©tect√©s
- √âviter le gaspillage alimentaire
- Adapter au profil nutritionnel et √† l'objectif
- Temps de pr√©paration raisonnable

Format JSON:
[
  {
    "name": "Nom cr√©atif",
    "description": "Description app√©tissante",
    "ingredients": [{"name": "ingredient", "quantity": "quantit√©", "fromFridge": true}],
    "instructions": ["√©tape 1", "√©tape 2"],
    "calories": number,
    "protein": number,
    "cookTime": number
  }
]`;

      const content = await this.mistralService.generateCustomContent(prompt, { response_format: 'json' });
      const parsed = JSONParsingUtils.safeJSONParse(content, []);
      const recipes = JSONParsingUtils.normalizeRecipes(parsed);
      
      return {
        detectedIngredients: (detectedIngredients || []).map(name => ({ name, quantity: '' })),
        recipes: this.adaptRecipesToGoal(recipes, userProfile),
        wasteReduction: this.calculateWasteReduction?.(detectedIngredients) || 0
      };
      
    } catch (error) {
      console.error('‚ùå Erreur scanner frigo:', error);
      return this.getFridgeScanFallback();
    }
  }

  /**
   * üòä RECETTES PAR MOOD - "Je me sens fatigu√©" ‚Üí recettes √©nergisantes
   */
  async generateMoodBasedRecipes(mood, userProfile, context = {}) {
    try {
      const moodMap = {
        'tired': {
          focus: '√©nergisantes, riches en fer et vitamines B',
          avoid: 'sucres rapides, aliments lourds',
          boost: '√©pinards, quinoa, avoine, fruits rouges'
        },
        'stressed': {
          focus: 'apaisantes, riches en magn√©sium et om√©ga-3',
          avoid: 'caf√©ine excessive, sucre',
          boost: 'saumon, amandes, chocolat noir, camomille'
        },
        'happy': {
          focus: 'color√©es et festives',
          avoid: 'rien de particulier',
          boost: 'fruits color√©s, herbes fra√Æches'
        },
        'sad': {
          focus: 'r√©confortantes et nutritives',
          avoid: 'aliments transform√©s',
          boost: 'l√©gumineuses, l√©gumes racines, √©pices chaudes'
        }
      };

      const moodProfile = moodMap[mood] || moodMap['happy'];
      
      const prompt = `Tu es un chef-nutritionniste sp√©cialis√© en food mood. Cr√©e 3 recettes pour quelqu'un qui se sent ${mood}.

OBJECTIF MOOD: ${moodProfile.focus}
INGR√âDIENTS BOOST: ${moodProfile.boost}
√Ä √âVITER: ${moodProfile.avoid}

PROFIL UTILISATEUR:
${this.buildProfileContext(userProfile)}

Chaque recette doit:
- Am√©liorer l'humeur naturellement
- √ätre align√©e avec l'objectif (calories et prot√©ines adapt√©es)
- Apporter les nutriments manquants pour ce mood

Format JSON identique aux autres recettes (avec champ optionnel "moodBenefits").`;

      const content = await this.mistralService.generateCustomContent(prompt, { response_format: 'json' });
      const parsed = JSONParsingUtils.safeJSONParse(content, []);
      const recipes = JSONParsingUtils.normalizeRecipes(parsed);
      
      // Sauvegarder dans l'historique mood
      this.saveMoodHistory(userProfile.userId, mood, context);
      
      return {
        mood,
        recipes: this.adaptRecipesToGoal(recipes, userProfile),
        moodInsights: this.getMoodInsights?.(userProfile.userId),
        recommendations: this.getMoodRecommendations?.(mood)
      };
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration mood recipes:', error);
      return this.getMoodFallback(mood);
    }
  }

  /**
   * üí∞ RECETTES PAR BUDGET - "J'ai 15‚Ç¨ pour la semaine"
   */
  async generateBudgetRecipes(budget, duration, userProfile) {
    try {
      const budgetPerDay = budget / duration;
      
      const prompt = `Tu es un expert en nutrition √©conomique. Cr√©e un plan repas complet.

BUDGET TOTAL: ${budget}‚Ç¨ pour ${duration} jours (${budgetPerDay.toFixed(2)}‚Ç¨/jour)

PROFIL UTILISATEUR:
${this.buildProfileContext(userProfile)}

Contraintes strictes:
- Respecter le budget absolu
- Maximiser la nutrition par euro d√©pens√©
- Ingr√©dients de base polyvalents
- Minimiser le gaspillage
- Adapter calories/prot√©ines √† l'objectif

Cr√©e 5 recettes √©conomiques avec:
- Co√ªt estim√© par portion
- Rendement (nb portions)
- Valeur nutritionnelle (calories, prot√©ines)
- Instructions de conservation

Format JSON avec champs: "estimatedCost", "servings", "costPerServing", "nutritionScore".`;

      const content = await this.mistralService.generateCustomContent(prompt, { response_format: 'json' });
      const parsed = JSONParsingUtils.safeJSONParse(content, []);
      const recipes = JSONParsingUtils.normalizeRecipes(parsed);
      
      return {
        budget,
        duration,
        budgetPerDay,
        recipes: this.adaptRecipesToGoal(recipes, userProfile)
      };
      
    } catch (error) {
      console.error('‚ùå Erreur budget recipes:', error);
      return this.getBudgetFallback(budget, duration);
    }
  }

  /**
   * üå± ADAPTATION ALLERGIES - Remplacement automatique
   */
  async adaptRecipeForAllergies(recipe, allergies, preferences = {}) {
    try {
      const prompt = `Tu es un chef sp√©cialis√© en adaptations alimentaires. Adapte cette recette.

RECETTE ORIGINALE: ${JSON.stringify(recipe, null, 2)}
ALLERGIES/INTOL√âRANCES: ${allergies.join(', ')}
PR√âF√âRENCES: ${JSON.stringify(preferences)}

T√¢ches:
1. Identifier tous les ingr√©dients probl√©matiques
2. Proposer des substituts √©quivalents nutritionnellement
3. Ajuster les quantit√©s et la pr√©paration si n√©cessaire
4. Maintenir le go√ªt et la texture autant que possible

Format JSON avec recette adapt√©e + champ "substitutions" d√©taillant chaque remplacement.`;

      const adaptedRecipe = await this.mistralService.generateCustomContent(prompt);
      
      return {
        originalRecipe: recipe,
        adaptedRecipe: adaptedRecipe || recipe,
        substitutions: this.extractSubstitutions(adaptedRecipe),
        nutritionComparison: this.compareNutrition(recipe, adaptedRecipe),
        allergySafety: this.validateAllergySafety(adaptedRecipe, allergies)
      };
      
    } catch (error) {
      console.error('‚ùå Erreur adaptation allergies:', error);
      return { originalRecipe: recipe, adaptedRecipe: recipe, error: error.message };
    }
  }

  /**
   * üçÇ RECETTES SAISONNI√àRES - Fruits/l√©gumes de saison automatiques
   */
  async generateSeasonalRecipes(userProfile, season = null) {
    try {
      const currentSeason = season || this.getCurrentSeason();
      const seasonalIngredients = this.seasonalIngredients[currentSeason];
      
      const prompt = `Tu es un chef sp√©cialis√© en cuisine de saison. Cr√©e 4 recettes ${currentSeason}.

INGR√âDIENTS DE SAISON: ${seasonalIngredients.fruits.join(', ')}, ${seasonalIngredients.vegetables.join(', ')}
PROFIL: ${userProfile.goal}, ${userProfile.dietType || 'omnivore'}

Contraintes:
- Utiliser principalement des ingr√©dients de saison
- Mettre en valeur les saveurs typiques de ${currentSeason}
- Optimiser les apports nutritionnels saisonniers
- Techniques de cuisson adapt√©es √† la saison

Format JSON standard avec champs: "seasonalIngredients", "seasonalBenefits", "seasonScore".`;

      const recipes = await this.mistralService.generateCustomContent(prompt);
      
      return {
        season: currentSeason,
        seasonalIngredients,
        recipes: recipes || [],
        nutritionBenefits: this.getSeasonalNutritionBenefits(currentSeason),
        shoppingGuide: this.getSeasonalShoppingGuide(currentSeason),
        preservationTips: this.getPreservationTips(seasonalIngredients)
      };
      
    } catch (error) {
      console.error('‚ùå Erreur recettes saisonni√®res:', error);
      return this.getSeasonalFallback();
    }
  }

  /**
   * ü§ñ COACH IA PERSONNEL - Analyse des habitudes
   */
  async generatePersonalizedAdvice(userProfile, nutritionHistory, activityData) {
    try {
      const analysisPrompt = `Tu es un coach nutritionnel IA. Analyse les donn√©es et donne des conseils personnalis√©s.

PROFIL: ${JSON.stringify(userProfile)}
HISTORIQUE NUTRITION (7 derniers jours): ${JSON.stringify(nutritionHistory.slice(-7))}
DONN√âES ACTIVIT√â: ${JSON.stringify(activityData)}

Analyse:
1. Tendances nutritionnelles (manques/exc√®s)
2. Corr√©lations alimentation/performance
3. Progression vers les objectifs
4. Points d'am√©lioration prioritaires

Fournis:
- 3 conseils d'action imm√©diate
- Ajustements du plan nutritionnel
- Pr√©diction objectifs (timeline r√©aliste)
- Alertes sant√© si n√©cessaire

Format JSON avec sections: "analysis", "actionableAdvice", "nutritionAdjustments", "predictions", "alerts".`;

      const advice = await this.mistralService.generateCustomContent(analysisPrompt);
      
      return {
        userId: userProfile.userId,
        timestamp: new Date().toISOString(),
        advice: advice || {},
        confidenceScore: this.calculateAdviceConfidence(nutritionHistory),
        nextReviewDate: this.getNextReviewDate(userProfile),
        trackingRecommendations: this.getTrackingRecommendations(userProfile)
      };
      
    } catch (error) {
      console.error('‚ùå Erreur coach IA:', error);
      return this.getCoachFallback();
    }
  }

  // === M√âTHODES UTILITAIRES ===

  async mockImageAnalysis(imageData) {
    // Simulation - √† remplacer par un vrai service de vision
    const commonIngredients = [
      '≈ìufs', 'lait', 'fromage', 'yaourt', 'beurre',
      'poulet', 'jambon', 'saumon',
      'tomates', 'salade', 'carottes', 'courgettes', 'oignons',
      'pommes', 'bananes', 'citrons',
      'riz', 'p√¢tes', 'pain', 'pommes de terre'
    ];
    
    // Simuler la d√©tection de 5-8 ingr√©dients
    const detected = [];
    for (let i = 0; i < Math.floor(Math.random() * 4) + 5; i++) {
      const ingredient = commonIngredients[Math.floor(Math.random() * commonIngredients.length)];
      if (!detected.includes(ingredient)) {
        detected.push(ingredient);
      }
    }
    
    return detected;
  }

  initSeasonalData() {
    return {
      'spring': {
        fruits: ['fraises', 'rhubarbe', 'abricots', 'cerises'],
        vegetables: ['asperges', 'petits pois', 'radis', '√©pinards', 'artichauts'],
        herbs: ['ciboulette', 'persil', 'estragon']
      },
      'summer': {
        fruits: ['tomates', 'p√™ches', 'melons', 'past√®ques', 'prunes'],
        vegetables: ['courgettes', 'aubergines', 'poivrons', 'concombres', 'haricots verts'],
        herbs: ['basilic', 'menthe', 'origan']
      },
      'autumn': {
        fruits: ['pommes', 'poires', 'raisins', 'figues', 'ch√¢taignes'],
        vegetables: ['potirons', 'champignons', 'choux', 'poireaux', 'betteraves'],
        herbs: ['thym', 'romarin', 'sauge']
      },
      'winter': {
        fruits: ['oranges', 'mandarines', 'pomelos', 'kiwis'],
        vegetables: ['choux de Bruxelles', 'endives', 'panais', 'topinambours', 'm√¢che'],
        herbs: ['laurier', 'persil plat']
      }
    };
  }

  getCurrentSeason() {
    const month = new Date().getMonth();
    if (month >= 2 && month <= 4) return 'spring';
    if (month >= 5 && month <= 7) return 'summer';
    if (month >= 8 && month <= 10) return 'autumn';
    return 'winter';
  }

  saveMoodHistory(userId, mood, context) {
    if (!this.moodHistory.has(userId)) {
      this.moodHistory.set(userId, []);
    }
    
    this.moodHistory.get(userId).push({
      timestamp: new Date().toISOString(),
      mood,
      context,
      // Limiter √† 30 derni√®res entr√©es
    });
    
    // Garder seulement les 30 derni√®res entr√©es
    const history = this.moodHistory.get(userId);
    if (history.length > 30) {
      this.moodHistory.set(userId, history.slice(-30));
    }
  }

  // === FALLBACKS ===

  getFridgeScanFallback() {
    return {
      detectedIngredients: [
        { name: '≈ìufs', quantity: '3' },
        { name: 'lait', quantity: '200ml' },
        { name: 'tomates', quantity: '2' },
        { name: 'fromage', quantity: '50g' }
      ],
      recipes: [
        {
          name: 'Omelette aux tomates et fromage',
          description: 'Omelette simple et nutritive avec les ingr√©dients de base',
          ingredients: [
            { name: '≈ìufs', quantity: '3', fromFridge: true },
            { name: 'tomates', quantity: '2', fromFridge: true },
            { name: 'fromage', quantity: '50g', fromFridge: true }
          ],
          instructions: ['Battre les ≈ìufs', 'Cuire l\'omelette', 'Ajouter tomates et fromage'],
          calories: 320,
          protein: 22,
          cookTime: 10
        }
      ],
      wasteReduction: 85,
      suggestions: ['Ajouter des l√©gumes verts', 'Herbes fra√Æches pour plus de saveur']
    };
  }

  getMoodFallback(mood) {
    return {
      mood,
      recipes: [
        {
          name: `Recette r√©confortante pour mood ${mood}`,
          description: 'Recette adapt√©e √† votre humeur du moment',
          calories: 400,
          protein: 25,
          moodBenefits: 'Apporte r√©confort et √©quilibre nutritionnel'
        }
      ],
      moodInsights: 'Donn√©es insuffisantes pour analyse approfondie',
      recommendations: ['Boire plus d\'eau', 'Faire une pause', 'Manger lentement']
    };
  }

  getBudgetFallback(budget, duration) {
    return {
      budget,
      duration,
      budgetPerDay: budget / duration,
      recipes: [
        {
          name: 'Riz aux l√©gumes √©conomique',
          estimatedCost: 2.5,
          servings: 4,
          costPerServing: 0.63,
          nutritionScore: 75
        }
      ],
      tips: ['Acheter en gros', 'Utiliser les l√©gumineuses', '√âviter le gaspillage']
    };
  }

  getSeasonalFallback() {
    const currentSeason = this.getCurrentSeason();
    return {
      season: currentSeason,
      seasonalIngredients: this.seasonalIngredients[currentSeason],
      recipes: [
        {
          name: `Plat de saison ${currentSeason}`,
          description: `Recette typique de ${currentSeason}`,
          seasonScore: 85
        }
      ]
    };
  }

  getCoachFallback() {
    return {
      advice: {
        analysis: 'Analyse en cours - plus de donn√©es n√©cessaires',
        actionableAdvice: [
          'Maintenir une alimentation √©quilibr√©e',
          'Boire suffisamment d\'eau',
          '√âcouter sa faim'
        ]
      },
      confidenceScore: 30
    };
  }
}

export const advancedAIService = new AdvancedAIService();
export default advancedAIService;
