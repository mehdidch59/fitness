/**
 * Service Mistral am√©lior√© pour la g√©n√©ration de recettes nutritionnelles
 * Version robuste avec parsing JSON avanc√© et gestion d'erreurs
 * SANS recettes fallback automatiques
 */

import { JSONParsingUtils } from '../utils/JSONParsingUtils';

class MistralNutritionService {
  constructor() {
    this.apiKey = process.env.REACT_APP_MISTRAL_API_KEY;
    this.baseURL = 'https://api.mistral.ai/v1/chat/completions';
    this.model = 'mistral-small';
    this.maxRetries = 2; // R√©duire les retries
    this.timeout = 45000; // R√©duire le timeout initial √† 45s
    this.requestQueue = new Map(); // Pour √©viter les requ√™tes multiples
  }

  /**
   * G√©n√®re des recettes align√©es sur l'objectif utilisateur (prise de masse, perte de poids, maintien)
   */
  async generateGoalAlignedRecipes(userProfile = {}) {
    try {
      console.log('ü§ñ G√©n√©ration recettes align√©es objectif via Mistral...');

      if (!this.isAvailable()) {
        throw new Error('Service Mistral non configur√© - v√©rifiez votre cl√© API');
      }

      const profileText = this.buildProfileContext(userProfile);
      const goalText = this.getGoalInstruction(userProfile?.goal);

      const prompt = `Tu es un nutritionniste expert. G√©n√®re exactement 5 recettes adapt√©es √† l'objectif utilisateur.\n\nPROFIL UTILISATEUR:\n${profileText}\n\nCONTRAINTES OBJECTIF:\n${goalText}\n\nEXIGENCES G√âN√âRALES:\n- √âquilibre nutritionnel et simplicit√©\n- Ingr√©dients disponibles facilement\n- Pr√©paration < 30 min si possible\n\nFORMAT R√âPONSE OBLIGATOIRE (JSON valide uniquement):\n\`\`\`json\n[\n  {\n    "name": "Nom de la recette",\n    "description": "Courte description",\n    "mealType": "petit-dejeuner|dejeuner|diner|collation",\n    "calories": 600,\n    "protein": 35,\n    "carbs": 60,\n    "fats": 20,\n    "time": 20,\n    "difficulty": "Facile|Moyen|Difficile",\n    "servings": 1,\n    "ingredients": [ {"name": "...", "quantity": "...", "unit": "..."} ],\n    "instructions": ["√âtape 1", "√âtape 2"],\n    "tips": ["Astuce 1"],\n    "nutritionTips": "Conseil nutritionnel bref"\n  }\n]\n\`\`\`\n\nIMPORTANT: R√©ponds UNIQUEMENT avec le JSON valide, aucun texte suppl√©mentaire.`;

      const content = await this.callMistralAPI(prompt);
      const parsed = JSONParsingUtils.safeJSONParse(content, []);
      const recipes = JSONParsingUtils.normalizeRecipes(parsed);
      return recipes;
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration recettes align√©es objectif:', error);
      throw new Error(`√âchec g√©n√©ration recettes: ${error.message}`);
    }
  }

  buildProfileContext(profile = {}) {
    try {
      const g = profile.goal || 'maintain';
      const gender = profile.gender || 'non sp√©cifi√©';
      const age = profile.age || 25;
      const weight = profile.weight || 70;
      const height = profile.height || 175;
      const level = profile.level || profile.activityLevel || 'interm√©diaire';
      const dietType = profile.dietType || 'omnivore';
      return `Objectif: ${g}\nGenre: ${gender}\n√Çge: ${age}\nPoids: ${weight}kg\nTaille: ${height}cm\nNiveau/Activit√©: ${level}\nR√©gime: ${dietType}`;
    } catch {
      return 'Objectif: maintain';
    }
  }

  getGoalInstruction(goal) {
    switch (goal) {
      case 'gain_muscle':
        return `Prise de masse: 500‚Äì800 kcal/recette, prot√©ines √©lev√©es (‚â•25‚Äì35g/repas).`;        
      case 'lose_weight':
        return `Perte de poids: 300‚Äì550 kcal/recette, prot√©ines soutenues (‚â•20‚Äì30g/repas), densit√© calorique mod√©r√©e.`;
      case 'maintain':
      default:
        return `Maintien: 400‚Äì700 kcal/recette, prot√©ines mod√©r√©es √† √©lev√©es (‚â•20‚Äì30g/repas).`;
    }
  }

  /**
   * G√©n√®re des recettes de prise de masse avec parsing robuste
   * SANS fallback automatique - retourne une erreur si √©chec
   */
  async generateMassGainRecipes(userProfile = {}) {
    try {
      console.log('ü§ñ G√©n√©ration de recettes via Mistral API...');
      
      if (!this.isAvailable()) {
        throw new Error('Service Mistral non configur√© - v√©rifiez votre cl√© API');
      }
      
      const content = await this.callMistralAPI(this.buildMassGainPrompt(userProfile));
      return this.parseRecipesResponse(content);
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration Mistral:', error);
      // Propager l'erreur au lieu de retourner un fallback
      throw new Error(`√âchec g√©n√©ration recettes Mistral: ${error.message}`);
    }
  }

  /**
   * Parse la r√©ponse des recettes avec validation robuste
   * Lance une erreur si le parsing √©choue
   */
  parseRecipesResponse(content) {
    if (!content) {
      throw new Error('Contenu vide re√ßu de Mistral');
    }

    console.log('üìù Contenu re√ßu de Mistral:', content.substring(0, 200) + '...');

    try {
      // Utiliser le parser JSON am√©lior√©
      const parsed = JSONParsingUtils.safeJSONParse(content, null);
      
      if (!parsed) {
        throw new Error('Impossible de parser le JSON retourn√© par Mistral');
      }

      // Normaliser les recettes
      const recipes = JSONParsingUtils.normalizeRecipes(parsed);
      
      if (!recipes || recipes.length === 0) {
        throw new Error('Aucune recette valide trouv√©e dans la r√©ponse Mistral');
      }

      console.log('‚úÖ Recettes pars√©es avec succ√®s:', recipes.length);
      return recipes;
    } catch (error) {
      console.error('‚ùå Erreur parsing recettes:', error);
      throw new Error(`Erreur parsing r√©ponse Mistral: ${error.message}`);
    }
  }

  /**
   * Construit le prompt optimis√© pour la prise de masse
   */
  buildMassGainPrompt(profile) {
    return `Tu es un nutritionniste expert sp√©cialis√© dans la prise de masse musculaire. 

PROFIL UTILISATEUR:
- Objectif: ${profile.goal || 'prise de masse'}
- Niveau: ${profile.level || 'interm√©diaire'}
- Poids: ${profile.weight || 75}kg
- Genre: ${profile.gender || 'homme'}
- √Çge: ${profile.age || 25} ans

MISSION: G√©n√®re exactement 5 recettes nutritionnelles pour la prise de masse.

CRIT√àRES OBLIGATOIRES:
- Minimum 500 calories par recette
- Minimum 25g de prot√©ines par recette
- √âquilibre nutritionnel optimal
- Ingr√©dients facilement disponibles
- Pr√©paration simple (max 30 min)

FORMAT DE R√âPONSE OBLIGATOIRE (JSON valide uniquement):
\`\`\`json
[
  {
    "name": "Nom de la recette",
    "description": "Description courte et app√©tissante",
    "mealType": "petit-dejeuner|dejeuner|diner|collation",
    "calories": 650,
    "protein": 35,
    "carbs": 70,
    "fats": 18,
    "time": 15,
    "difficulty": "Facile|Moyen|Difficile",
    "servings": 1,    "ingredients": [
      {"name": "Nom pr√©cis ingr√©dient", "quantity": "100", "unit": "g"},
      {"name": "Autre ingr√©dient", "quantity": "2", "unit": "cuill√®res"}
    ],
    "instructions": [
      "√âtape 1 d√©taill√©e",
      "√âtape 2 d√©taill√©e"
    ],
    "tips": [
      "Conseil pratique 1",
      "Conseil pratique 2"
    ],
    "nutritionTips": "Conseils nutritionnels sp√©cifiques"
  }
]
\`\`\`

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON valide, aucun texte suppl√©mentaire.`;
  }  /**
   * Wrapper pour fetch avec timeout am√©lior√©
   */
  async fetchWithTimeout(url, options, timeoutMs) {
    return new Promise((resolve, reject) => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
        reject(new Error(`Timeout apr√®s ${timeoutMs}ms`));
      }, timeoutMs);

      fetch(url, { ...options, signal: controller.signal })
        .then(response => {
          clearTimeout(timeoutId);
          resolve(response);
        })
        .catch(error => {
          clearTimeout(timeoutId);
          if (error.name === 'AbortError') {
            reject(new Error(`Timeout de ${timeoutMs}ms d√©pass√©`));
          } else {
            reject(error);
          }
        });
    });
  }

  /**
   * Appel API Mistral avec retry et timeout am√©lior√©
   */  async callMistralAPI(prompt, retryCount = 0) {
    try {
      console.log(`üåê Appel Mistral API (tentative ${retryCount + 1})...`);

      // V√©rifier que l'API key est disponible
      if (!this.apiKey) {
        throw new Error('Cl√© API Mistral non configur√©e - ajoutez REACT_APP_MISTRAL_API_KEY √† votre .env');
      }

      // Timeout progressif
      const timeoutDuration = Math.min(this.timeout * (retryCount + 1), 60000); // Max 60s
      console.log(`‚è±Ô∏è Timeout configur√©: ${timeoutDuration}ms`);

      const response = await this.fetchWithTimeout(this.baseURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: this.model,
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 4000
        })
      }, timeoutDuration);if (!response.ok) {
        let errorText = 'Erreur inconnue';
        try {
          errorText = await response.text();
        } catch (e) {
          errorText = `Status ${response.status}: ${response.statusText}`;
        }
        
        if (response.status === 401) {
          throw new Error('Cl√© API Mistral invalide - v√©rifiez votre configuration');
        } else if (response.status === 403) {
          throw new Error('Acc√®s refus√© √† l\'API Mistral - v√©rifiez vos permissions');
        } else if (response.status === 429) {
          throw new Error('Limite de taux API Mistral atteinte - r√©essayez plus tard');
        } else {
          throw new Error(`Erreur API Mistral: ${response.status} ${response.statusText} - ${errorText}`);
        }
      }

      const data = await response.json();
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        throw new Error('R√©ponse API Mistral invalide - structure inattendue');
      }

      const content = data.choices[0].message.content;
      if (!content) {
        throw new Error('Contenu vide dans la r√©ponse Mistral');
      }

      return content;    } catch (error) {
      console.error(`‚ùå Erreur appel Mistral (tentative ${retryCount + 1}):`, error);

      // Gestion sp√©ciale des erreurs d'abort/timeout
      if (error.name === 'AbortError' || error.message.includes('Timeout')) {
        console.warn('üö´ Requ√™te annul√©e (timeout)');
        
        // Retry avec timeout plus long seulement pour les timeouts
        if (retryCount < this.maxRetries) {
          console.log(`üîÑ Retry avec timeout plus long dans 3 secondes...`);
          await new Promise(resolve => setTimeout(resolve, 3000));
          return this.callMistralAPI(prompt, retryCount + 1);
        } else {
          throw new Error('Timeout persistant - l\'API Mistral ne r√©pond pas');
        }
      }

      // Retry logic pour les autres erreurs r√©seau/temporaires
      if (retryCount < this.maxRetries && 
          !error.message.includes('401') && // Pas de retry pour erreur auth
          !error.message.includes('403') && // Pas de retry pour erreur permission
          !error.message.includes('Cl√© API')) {  // Pas de retry pour erreur config
        
        console.log(`üîÑ Retry dans 2 secondes...`);
        await new Promise(resolve => setTimeout(resolve, 2000 * (retryCount + 1))); // D√©lai croissant
        return this.callMistralAPI(prompt, retryCount + 1);
      }

      // Propager l'erreur apr√®s √©puisement des tentatives
      throw error;
    }
  }

  /**
   * V√©rification de la disponibilit√© du service
   */
  isAvailable() {
    return !!this.apiKey && !!this.baseURL;
  }

  /**
   * Test de connectivit√© simple
   */
  async testConnection() {
    try {
      if (!this.isAvailable()) {
        throw new Error('Service Mistral non configur√©');
      }
      
      console.log('‚úÖ Test connexion Mistral r√©ussi');
      return true;
    } catch (error) {
      console.error('‚ùå Test connexion Mistral √©chou√©:', error);
      return false;
    }
  }

  /**
   * G√©n√©ration de recettes avec profil utilisateur d√©taill√©
   */
  async generatePersonalizedRecipes(userProfile) {
    try {
      console.log('üéØ G√©n√©ration recettes personnalis√©es...', userProfile);
      
      // Construire un prompt plus d√©taill√© avec le profil utilisateur
      const enhancedProfile = {
        goal: userProfile.goal || 'prise de masse',
        level: userProfile.level || 'interm√©diaire',
        weight: userProfile.weight || 75,
        gender: userProfile.gender || 'homme',
        age: userProfile.age || 25,
        activityLevel: userProfile.activityLevel || 'mod√©r√©',
        preferences: userProfile.preferences || [],
        allergies: userProfile.allergies || [],
        targetCalories: userProfile.targetCalories || 2500
      };

      return this.generateMassGainRecipes(enhancedProfile);
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration personnalis√©e:', error);
      throw error;
    }
  }

  /**
   * G√©n√©ration de plan nutritionnel complet
   */
  async generateNutritionPlan(userProfile) {
    try {
      console.log('üìã G√©n√©ration plan nutritionnel complet...');
      
      const planPrompt = `Tu es un nutritionniste expert. Cr√©e un plan nutritionnel complet pour la prise de masse.

PROFIL UTILISATEUR:
- Poids: ${userProfile.weight || 75}kg
- √Çge: ${userProfile.age || 25} ans
- Genre: ${userProfile.gender || 'homme'}
- Niveau: ${userProfile.level || 'interm√©diaire'}

G√©n√®re un plan avec:
- 3 repas principaux + 2 collations
- R√©partition calorique optimale
- Planning hebdomadaire

R√©ponds en JSON avec cette structure:
{
  "dailyCalories": 2800,
  "macros": {"protein": 140, "carbs": 350, "fats": 93},
  "meals": [
    {
      "type": "petit-dejeuner",
      "calories": 600,
      "recipes": ["nom recette 1", "nom recette 2"]
    }
  ],
  "schedule": {
    "lundi": ["petit-dejeuner", "collation", "dejeuner", "collation", "diner"],
    "mardi": ["petit-dejeuner", "collation", "dejeuner", "collation", "diner"]
  }
}`;

      const content = await this.callMistralAPI(planPrompt);
      return this.parseNutritionPlan(content);
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration plan nutrition:', error);
      throw error;
    }
  }

  /**
   * Parse un plan nutritionnel
   */
  parseNutritionPlan(content) {
    try {
      const parsed = JSONParsingUtils.safeJSONParse(content, null);
      
      if (!parsed || !parsed.dailyCalories) {
        throw new Error('Plan nutritionnel invalide');
      }

      return parsed;
    } catch (error) {
      console.error('‚ùå Erreur parsing plan nutrition:', error);
      throw error;
    }
  }

  /**
   * Obtenir les statistiques d'utilisation
   */
  getUsageStats() {
    const stats = {
      totalCalls: 0,
      successfulCalls: 0,
      failedCalls: 0,
      averageResponseTime: 0
    };

    try {
      const cached = localStorage.getItem('mistral_usage_stats');
      if (cached) {
        return { ...stats, ...JSON.parse(cached) };
      }
    } catch (error) {
      console.warn('Erreur lecture stats usage');
    }

    return stats;
  }

  /**
   * Mettre √† jour les statistiques d'utilisation
   */
  updateUsageStats(isSuccess, responseTime) {
    try {
      const stats = this.getUsageStats();
      stats.totalCalls++;
      
      if (isSuccess) {
        stats.successfulCalls++;
      } else {
        stats.failedCalls++;
      }
      
      stats.averageResponseTime = (stats.averageResponseTime + responseTime) / 2;
      
      localStorage.setItem('mistral_usage_stats', JSON.stringify(stats));
    } catch (error) {
      console.warn('Erreur sauvegarde stats usage');
    }
  }
}

// Export de l'instance
export const mistralService = new MistralNutritionService();
export default mistralService;
