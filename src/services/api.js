import axios from 'axios';
// import { usePopup } from '../context/PopupContext';

// Cr√©er une instance pour stocker la r√©f√©rence au hook usePopup
let popupManager = null;

// Fonction d'initialisation pour injecter les popups dans le service API
export const initApiWithPopups = (popupHook) => {
  popupManager = popupHook;
};

// Fonction utilitaire pour afficher des popups (avec fallback console si non disponible)
const showPopupOrConsole = (type, title, message) => {
  if (popupManager) {
    if (type === 'error') {
      popupManager.showErrorPopup(title, message);
    } else if (type === 'info') {
      popupManager.showInfoPopup(title, message);
    } else if (type === 'profile') {
      popupManager.showProfileIncompletePopup();
    }
  } else {
    // Fallback vers console si les popups ne sont pas disponibles
    if (type === 'error') {
      console.error(`${title}: ${message}`);
    } else {
      console.log(`${title}: ${message}`);
    }
  }
};

// Configuration de base d'Axios
const api = axios.create({
  baseURL: process.env.REACT_APP_API_URL || '/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  }
});

// Configuration pour les API externes avec variables d'environnement
const googleSearchApiKey = process.env.REACT_APP_GOOGLE_SEARCH_API_KEY;
const googleSearchEngineId = process.env.REACT_APP_GOOGLE_SEARCH_ENGINE_ID;

// V√©rification des variables d'environnement requises
if (!googleSearchApiKey || !googleSearchEngineId) {
  console.warn('‚ö†Ô∏è Variables d\'environnement manquantes pour Google Search API');
  console.warn('Assurez-vous de d√©finir REACT_APP_GOOGLE_SEARCH_API_KEY et REACT_APP_GOOGLE_SEARCH_ENGINE_ID');
}

// Fonction utilitaire pour v√©rifier si l'utilisateur est authentifi√© et a un profil complet
const isUserProfileComplete = () => {
  try {
    // V√©rifier d'abord l'authentification
    const authToken = localStorage.getItem('authToken');
    const userData = localStorage.getItem('userData');
    
    if (!authToken || !userData) {
      showPopupOrConsole('profile', 'Connexion requise', 'Veuillez vous connecter pour acc√©der √† cette fonctionnalit√©.');
      return false;
    }

    // V√©rifier ensuite le profil utilisateur
    const userProfile = localStorage.getItem('userProfile');
    if (!userProfile) {
      showPopupOrConsole('profile', 'Profil incomplet', 'Veuillez compl√©ter votre profil pour acc√©der √† cette fonctionnalit√©.');
      return false;
    }
    
    const profile = JSON.parse(userProfile);
    // V√©rifier que tous les champs requis sont pr√©sents
    const isComplete = profile && 
           profile.height && 
           profile.weight && 
           profile.age && 
           profile.goal && 
           profile.activityLevel;
           
    if (!isComplete) {
      showPopupOrConsole('profile', 'Profil incomplet', 'Veuillez compl√©ter votre profil dans les param√®tres pour acc√©der √† cette fonctionnalit√©.');
    }
    
    return isComplete;
  } catch (error) {
    showPopupOrConsole('error', 'Erreur', 'Une erreur est survenue lors de la v√©rification du profil.');
    return false;
  }
};

// Donn√©es de fallback pour les recettes (√† utiliser en cas d'√©chec de l'API)
const fallbackMassGainRecipes = [
  {
    id: `recipe-mass-${Date.now()}-1`,
    name: 'Poulet teriyaki et riz complet',
    description: 'Riche en prot√©ines et en glucides complexes, parfait pour la prise de masse musculaire.',
    source: 'https://exemple.com/recette-poulet-teriyaki',
    calories: 650,
    protein: 42,
    time: 30,
    image: 'https://source.unsplash.com/300x200/?chicken+rice'
  },
  {
    id: `recipe-mass-${Date.now()}-2`,
    name: 'Smoothie prot√©in√© banane et beurre de cacahu√®te',
    description: 'Shake id√©al post-entra√Ænement avec whey, banane, lait et beurre de cacahu√®te.',
    source: 'https://exemple.com/smoothie-proteine',
    calories: 580,
    protein: 38,
    time: 5,
    image: 'https://source.unsplash.com/300x200/?protein+smoothie'
  },
  {
    id: `recipe-mass-${Date.now()}-3`,
    name: 'Bowl de quinoa et b≈ìuf marin√©',
    description: 'Un plat complet riche en prot√©ines, fer et acides amin√©s essentiels pour la croissance musculaire.',
    source: 'https://exemple.com/bowl-boeuf-quinoa',
    calories: 720,
    protein: 45,
    time: 35,
    image: 'https://source.unsplash.com/300x200/?beef+bowl'
  }
];

// Intercepteur pour ajouter le token d'authentification si disponible
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Intercepteur pour g√©rer les erreurs de r√©ponse
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    
    // Gestion des erreurs d'authentification (401)
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        // Tentative de rafra√Æchissement du token
        const refreshToken = localStorage.getItem('refreshToken');
        if (refreshToken) {
          const response = await axios.post(
            `${process.env.REACT_APP_API_URL}/auth/refresh`,
            { refreshToken }
          );
          
          const { token } = response.data;
          localStorage.setItem('authToken', token);
          
          originalRequest.headers.Authorization = `Bearer ${token}`;
          return api(originalRequest);
        }
      } catch (refreshError) {
        // En cas d'√©chec du rafra√Æchissement, d√©connexion
        localStorage.removeItem('authToken');
        localStorage.removeItem('refreshToken');
        window.location.href = '/login';
      }
    }
    
    return Promise.reject(error);
  }
);

// Service de recherche web
export const webSearchService = {
  // Recherche Google personnalis√©e avec extraction intelligente
  searchGoogle: async (query, userGoal = null) => {
    // V√©rifier que le profil est complet
    if (!isUserProfileComplete()) {
      showPopupOrConsole('error', 'Profil incomplet', 'Veuillez compl√©ter votre profil pour utiliser la recherche personnalis√©e');
      return {
        error: 'PROFILE_INCOMPLETE',
        message: 'Veuillez compl√©ter votre profil pour acc√©der √† la recherche personnalis√©e'
      };
    }
    
    try {
      console.log(`üîç Recherche Google intelligente: "${query}"`);
      
      // V√©rifier que les cl√©s API sont disponibles
      if (!googleSearchApiKey || !googleSearchEngineId) {
        console.warn('üîß API Google indisponible, utilisation de la simulation intelligente');
        return simulateEnhancedSearchResults(query, userGoal);
      }
      
      // Effectuer la recherche Google r√©elle
      const response = await fetch(
        `https://www.googleapis.com/customsearch/v1?key=${googleSearchApiKey}&cx=${googleSearchEngineId}&q=${encodeURIComponent(query)}&num=8&lr=lang_fr&gl=fr&hl=fr`
      );
      
      if (!response.ok) {
        throw new Error(`Erreur API Google: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (!data.items || data.items.length === 0) {
        console.warn('üîç Aucun r√©sultat trouv√©, utilisation de la simulation intelligente');
        return simulateEnhancedSearchResults(query, userGoal);
      }
      
      console.log(`‚úÖ ${data.items.length} r√©sultats trouv√©s depuis Google Search API`);
      return data.items;
      
    } catch (error) {
      console.error('Erreur lors de la recherche Google:', error);
      showPopupOrConsole('error', 'Erreur de recherche', 'Probl√®me de connexion avec Google. Utilisation de la recherche alternative.');
      return simulateEnhancedSearchResults(query, userGoal);
    }
  },
  
  // Recherche automatique de recettes pour prise de masse avec extraction intelligente
  searchMassGainRecipes: async () => {
    // V√©rifier que le profil est complet
    if (!isUserProfileComplete()) {
      console.warn('Profil utilisateur incomplet, recherche non autoris√©e');
      return {
        error: 'PROFILE_INCOMPLETE',
        message: 'Veuillez compl√©ter votre profil pour acc√©der aux recettes personnalis√©es'
      };
    }
    
    try {
      // R√©cup√©rer le profil utilisateur pour personnaliser la recherche
      const userProfile = JSON.parse(localStorage.getItem('userProfile') || '{}');
      const { weight, height, activityLevel, fitnessGoal, goal } = userProfile;
      
      // Calculer les besoins caloriques approximatifs (formule simplifi√©e)
      const bmr = (weight && height) ? (10 * weight + 6.25 * height - 5 * (userProfile.age || 30)) : 2000;
      const activityMultiplier = activityLevel === 'high' ? 1.8 : activityLevel === 'medium' ? 1.5 : 1.2;
      const dailyCalories = Math.round(bmr * activityMultiplier);
      
      // Recherche affin√©e pour extraire les recettes compl√®tes
      let searchQueries = [];
      
      if (goal === 'gain_muscle' || fitnessGoal === 'muscle_gain') {
        searchQueries = [
          `"recette prot√©in√©e" "grammes de prot√©ines" "ingr√©dients" "pr√©paration" musculation site:marmiton.org`,
          `"recette prise de masse" "calories" "√©tapes d√©taill√©es" site:750g.com`,
          `"shake prot√©in√©" "ingr√©dients" "pr√©paration" musculation site:cuisineaz.com`,
          `"plat riche en prot√©ines" "poulet" "boeuf" "oeufs" "recette compl√®te"`
        ];
      } else if (goal === 'lose_weight' || fitnessGoal === 'weight_loss') {
        searchQueries = [
          `"recette minceur" "calories" "ingr√©dients" "pr√©paration d√©taill√©e" site:marmiton.org`,
          `"plat l√©ger" "faible en calories" "ingr√©dients" "√©tapes" site:750g.com`,
          `"salade prot√©in√©e" "recette compl√®te" "temps de pr√©paration" site:cuisineaz.com`
        ];
      } else {
        searchQueries = [
          `"recette √©quilibr√©e" "prot√©ines" "ingr√©dients" "pr√©paration" nutrition site:marmiton.org`,
          `"plat complet" "ingr√©dients" "√©tapes d√©taill√©es" nutrition site:750g.com`
        ];
      }
      
      console.log('ü•ó Recherche affin√©e de recettes:', searchQueries[0]);
      
      // Effectuer la recherche avec la premi√®re requ√™te optimis√©e
      const searchResults = await webSearchService.searchGoogle(searchQueries[0], goal || fitnessGoal);
      
      // V√©rifier si une erreur de profil incomplet a √©t√© retourn√©e
      if (searchResults.error === 'PROFILE_INCOMPLETE') {
        return searchResults;
      }
      
      // Transformation intelligente des r√©sultats en recettes structur√©es
      const recipes = searchResults.map((result, index) => {
        const extractedData = extractRecipeData(result);
        
        return {
          id: extractedData.id,
          name: extractedData.name,
          description: extractedData.description,
          source: extractedData.source,
          calories: extractedData.calories,
          protein: extractedData.protein,
          time: extractedData.time,
          ingredients: extractedData.ingredients,
          dishType: extractedData.dishType,
          qualityScore: extractedData.qualityScore,
          image: extractedData.image,
          webSearched: true,
          extractedFrom: 'intelligent_search',
          targetCalories: Math.round(dailyCalories / 4) // Calories par repas
        };
      });
      
      // Trier par score de qualit√©
      recipes.sort((a, b) => (b.qualityScore || 0) - (a.qualityScore || 0));
      
      console.log(`‚úÖ ${recipes.length} recettes extraites avec intelligence artificielle`);
      
      return recipes.length > 0 ? recipes : fallbackMassGainRecipes;
      
    } catch (error) {
      console.error('Erreur lors de la recherche de recettes:', error);
      console.log('üîÑ Utilisation des recettes de fallback');
      return fallbackMassGainRecipes;
    }
  },
  
  // Recherche de programmes d'entra√Ænement
  searchWorkoutPrograms: async (criteria) => {
    // V√©rifier que le profil est complet
    if (!isUserProfileComplete()) {
      console.warn('Profil utilisateur incomplet, recherche non autoris√©e');
      return {
        error: 'PROFILE_INCOMPLETE',
        message: 'Veuillez compl√©ter votre profil pour acc√©der aux programmes personnalis√©s'
      };
    }

    try {
      const { location, equipment = [] } = criteria;
      let searchQuery = 'programme entra√Ænement fitness';
      
      // R√©cup√©rer le profil utilisateur pour personnaliser la recherche
      const userProfile = JSON.parse(localStorage.getItem('userProfile') || '{}');
      const { fitnessGoal, activityLevel } = userProfile;
      
      if (location === 'home') {
        searchQuery += ' √† domicile';
      } else if (location === 'gym') {
        searchQuery += ' en salle';
      }
      
      if (equipment.length > 0) {
        searchQuery += ' avec ' + equipment.join(' ');
      }
      
      // Personnaliser en fonction de l'objectif et du niveau d'activit√©
      if (fitnessGoal === 'muscle_gain') {
        searchQuery += ' prise de masse musculation';
      } else if (fitnessGoal === 'weight_loss') {
        searchQuery += ' perte de poids';
      } else if (fitnessGoal === 'endurance') {
        searchQuery += ' am√©lioration endurance';
      } else if (fitnessGoal === 'flexibility') {
        searchQuery += ' flexibilit√© yoga';
      }
      
      if (activityLevel === 'beginner') {
        searchQuery += ' d√©butant';
      } else if (activityLevel === 'advanced') {
        searchQuery += ' avanc√©';
      }
      
      console.log('Recherche personnalis√©e de programmes:', searchQuery);
      
      const searchResults = await webSearchService.searchGoogle(searchQuery, fitnessGoal);
      
      // V√©rifier si une erreur de profil incomplet a √©t√© retourn√©e
      if (searchResults.error === 'PROFILE_INCOMPLETE') {
        return searchResults;
      }
      
      // Transformation des r√©sultats en programmes d'entra√Ænement
      return searchResults.map((result, index) => ({
        id: `program-${Date.now()}-${index}`,
        title: result.title,
        description: result.snippet,
        level: determineLevel(result.title, result.snippet, activityLevel),
        duration: determineDuration(result.title, result.snippet),
        equipment: equipment.length > 0 ? equipment.join(', ') : 'Aucun',
        source: result.link,
        thumbnail: result.pagemap?.cse_image?.[0]?.src || `https://source.unsplash.com/300x200/?fitness+${location === 'home' ? 'home' : 'gym'}`,
        workouts: [],
        goal: fitnessGoal // Ajouter l'objectif pour r√©f√©rence
      }));
    } catch (error) {
      console.error('Erreur lors de la recherche de programmes:', error);
      // Retourner un programme de fallback
      return [
        {
          id: `program-${Date.now()}-fallback`,
          title: `Programme d'entra√Ænement ${criteria.location === 'home' ? '√† domicile' : 'en salle'}`,
          description: 'Programme personnalis√© adapt√© √† votre profil et votre √©quipement.',
          level: 'Interm√©diaire',
          duration: '4 semaines',
          equipment: criteria.equipment.length > 0 ? criteria.equipment.join(', ') : 'Aucun',
          source: 'https://exemple.com/programme-fitness',
          thumbnail: `https://source.unsplash.com/300x200/?fitness+${criteria.location === 'home' ? 'home' : 'gym'}`,
          workouts: []
        }
      ];
    }
  },
  
  // Recherche de recettes et plans nutritionnels
  searchNutritionPlans: async (criteria) => {
    // V√©rifier que le profil est complet
    if (!isUserProfileComplete()) {
      console.warn('Profil utilisateur incomplet, recherche non autoris√©e');
      return {
        error: 'PROFILE_INCOMPLETE',
        message: 'Veuillez compl√©ter votre profil pour acc√©der aux plans nutritionnels personnalis√©s'
      };
    }
    
    try {
      const { dietType, cookingTime, allergies = [] } = criteria;
      
      // R√©cup√©rer le profil utilisateur pour personnaliser la recherche
      const userProfile = JSON.parse(localStorage.getItem('userProfile') || '{}');
      const { weight, height, age, fitnessGoal } = userProfile;
      
      // Calculer les besoins caloriques approximatifs
      const bmr = (weight && height) ? (10 * weight + 6.25 * height - 5 * (age || 30)) : 2000;
      const activityMultiplier = userProfile.activityLevel === 'high' ? 1.8 : 
                                userProfile.activityLevel === 'medium' ? 1.5 : 1.2;
      const dailyCalories = Math.round(bmr * activityMultiplier);
      
      let searchQuery = 'recettes ';
      
      if (dietType === 'vegetarian') {
        searchQuery += 'v√©g√©tariennes ';
      } else if (dietType === 'vegan') {
        searchQuery += 'v√©ganes ';
      }
      
      if (cookingTime === 'quick') {
        searchQuery += 'rapides ';
      }
      
      if (allergies.length > 0) {
        searchQuery += 'sans ' + allergies.join(' sans ');
      }
      
      // Personnaliser en fonction de l'objectif
      if (fitnessGoal === 'muscle_gain') {
        searchQuery += ` riche en prot√©ines prise de masse ${dailyCalories + 500} calories`;
      } else if (fitnessGoal === 'weight_loss') {
        searchQuery += ` faible en calories perte de poids ${dailyCalories - 500} calories`;
      } else if (fitnessGoal === 'endurance') {
        searchQuery += ` complexes glucidiques endurance ${dailyCalories} calories`;
      } else {
        searchQuery += ` nutrition √©quilibr√©e ${dailyCalories} calories`;
      }
      
      console.log('Recherche personnalis√©e de plans nutritionnels:', searchQuery);
      
      const searchResults = await webSearchService.searchGoogle(searchQuery, fitnessGoal);
      
      // V√©rifier si une erreur de profil incomplet a √©t√© retourn√©e
      if (searchResults.error === 'PROFILE_INCOMPLETE') {
        return searchResults;
      }
      
      // Transformation des r√©sultats en recettes
      const recipes = searchResults.map((result, index) => ({
        id: `recipe-${Date.now()}-${index}`,
        name: result.title,
        description: result.snippet,
        source: result.link,
        calories: estimateCalories(result.title, result.snippet, fitnessGoal === 'muscle_gain' ? 'high' : 
                                                                fitnessGoal === 'weight_loss' ? 'low' : 'medium'),
        protein: estimateProtein(result.title, result.snippet, fitnessGoal === 'muscle_gain' ? 'high' : 'medium'),
        time: estimateCookingTime(result.title, result.snippet, cookingTime),
        image: result.pagemap?.cse_image?.[0]?.src || `https://source.unsplash.com/300x200/?${encodeURIComponent(result.title.split(' ')[0])}`
      }));
      
      // Cr√©ation d'un plan nutritionnel personnalis√©
      return {
        id: `plan-${Date.now()}`,
        title: `Plan nutritionnel ${dietType === 'vegetarian' ? 'v√©g√©tarien' : dietType === 'vegan' ? 'v√©gane' : 'personnalis√©'}`,
        dietType,
        source: 'Recherche Web IA',
        calorieTarget: fitnessGoal === 'muscle_gain' ? dailyCalories + 500 : 
                      fitnessGoal === 'weight_loss' ? dailyCalories - 500 : dailyCalories,
        goal: fitnessGoal,
        recipes
      };
    } catch (error) {
      console.error('Erreur lors de la recherche de plans nutritionnels:', error);
      // Retourner un plan de fallback
      return {
        id: `plan-${Date.now()}-fallback`,
        title: `Plan nutritionnel ${criteria.dietType === 'vegetarian' ? 'v√©g√©tarien' : criteria.dietType === 'vegan' ? 'v√©gane' : 'personnalis√©'}`,
        dietType: criteria.dietType,
        source: 'Recherche Web IA',
        recipes: generateFallbackRecipes(criteria)
      };
    }
  }
};

// Fonction pour g√©n√©rer des r√©sultats de recherche simul√©s
function simulateSearchResults(query, userGoal = null) {
  const keywords = query.toLowerCase().split(' ');
  
  // Base de r√©sultats de recherche simul√©s adapt√©e aux objectifs
  let baseResults = [
    {
      title: 'Programme d\'entra√Ænement complet pour prise de masse',
      snippet: 'Un programme de 8 semaines con√ßu pour la prise de masse musculaire avec exercices et conseils nutritionnels.',
      link: 'https://exemple.com/programme-prise-masse',
      displayLink: 'exemple.com',
      pagemap: {
        cse_image: [{ src: 'https://source.unsplash.com/300x200/?bodybuilding' }]
      },
      category: 'muscle_gain'
    },
    {
      title: 'Recettes prot√©in√©es pour sportifs - Guide complet',
      snippet: 'D√©couvrez 15 recettes riches en prot√©ines pour optimiser votre r√©cup√©ration et favoriser la croissance musculaire.',
      link: 'https://exemple.com/recettes-proteinees',
      displayLink: 'exemple.com',
      pagemap: {
        cse_image: [{ src: 'https://source.unsplash.com/300x200/?protein+food' }]
      },
      category: 'nutrition'
    },
    {
      title: 'Exercices √† domicile sans mat√©riel - Programme complet',
      snippet: 'Programme d\'entra√Ænement complet √† faire chez soi sans √©quipement sp√©cifique pour rester en forme.',
      link: 'https://exemple.com/exercices-maison',
      displayLink: 'exemple.com',
      pagemap: {
        cse_image: [{ src: 'https://source.unsplash.com/300x200/?home+workout' }]
      },
      category: 'home_workout'
    },
    {
      title: 'Nutrition sportive : guide pour d√©butants',
      snippet: 'Apprenez les bases de la nutrition sportive pour optimiser vos performances et atteindre vos objectifs.',
      link: 'https://exemple.com/nutrition-sport',
      displayLink: 'exemple.com',
      pagemap: {
        cse_image: [{ src: 'https://source.unsplash.com/300x200/?healthy+food' }]
      },
      category: 'nutrition'
    },
    {
      title: 'Recettes v√©g√©tariennes riches en prot√©ines',
      snippet: 'D√©couvrez comment obtenir suffisamment de prot√©ines avec un r√©gime v√©g√©tarien gr√¢ce √† ces recettes √©quilibr√©es.',
      link: 'https://exemple.com/vegetarien-proteines',
      displayLink: 'exemple.com',
      pagemap: {
        cse_image: [{ src: 'https://source.unsplash.com/300x200/?vegetarian+protein' }]
      },
      category: 'vegetarian'
    },
    {
      title: 'Plan de perte de poids - R√©gime et exercices',
      snippet: 'Perdez du poids efficacement avec ce programme combinant alimentation √©quilibr√©e et exercices cibl√©s.',
      link: 'https://exemple.com/perte-poids',
      displayLink: 'exemple.com',
      pagemap: {
        cse_image: [{ src: 'https://source.unsplash.com/300x200/?weight+loss' }]
      },
      category: 'weight_loss'
    },
    {
      title: 'Entra√Ænement cardio pour am√©liorer l\'endurance',
      snippet: 'S√©ances d\'entra√Ænement con√ßues pour renforcer votre syst√®me cardiovasculaire et augmenter votre endurance.',
      link: 'https://exemple.com/cardio-endurance',
      displayLink: 'exemple.com',
      pagemap: {
        cse_image: [{ src: 'https://source.unsplash.com/300x200/?cardio+training' }]
      },
      category: 'endurance'
    },
    {
      title: 'Exercices d\'√©tirement pour am√©liorer la flexibilit√©',
      snippet: 'Guide complet des √©tirements pour augmenter votre amplitude de mouvement et pr√©venir les blessures.',
      link: 'https://exemple.com/etirements',
      displayLink: 'exemple.com',
      pagemap: {
        cse_image: [{ src: 'https://source.unsplash.com/300x200/?stretching' }]
      },
      category: 'flexibility'
    }
  ];
  
  // Si un objectif est sp√©cifi√©, privil√©gier les r√©sultats correspondants
  if (userGoal) {
    baseResults = baseResults.sort((a, b) => {
      // Mettre en priorit√© les r√©sultats correspondant √† l'objectif
      if (a.category === userGoal && b.category !== userGoal) return -1;
      if (a.category !== userGoal && b.category === userGoal) return 1;
      return 0;
    });
  }
  
  // Filtrer et trier les r√©sultats en fonction des mots-cl√©s de la requ√™te
  const relevantResults = baseResults
    .filter(result => {
      const content = (result.title + ' ' + result.snippet).toLowerCase();
      return keywords.some(keyword => content.includes(keyword));
    })
    .sort((a, b) => {
      // D'abord par correspondance √† l'objectif (si sp√©cifi√©)
      if (userGoal) {
        if (a.category === userGoal && b.category !== userGoal) return -1;
        if (a.category !== userGoal && b.category === userGoal) return 1;
      }
      
      // Ensuite par pertinence des mots-cl√©s
      const relevanceA = keywords.filter(kw => (a.title + ' ' + a.snippet).toLowerCase().includes(kw)).length;
      const relevanceB = keywords.filter(kw => (b.title + ' ' + b.snippet).toLowerCase().includes(kw)).length;
      return relevanceB - relevanceA;
    });
  
  // Si aucun r√©sultat pertinent, retourner tous les r√©sultats de base (tri√©s par objectif si sp√©cifi√©)
  return relevantResults.length > 0 ? relevantResults : baseResults;
}

// Fonction pour g√©n√©rer des r√©sultats de recherche simul√©s intelligents
function simulateEnhancedSearchResults(query, userGoal = null) {
  const keywords = query.toLowerCase().split(' ');
  
  // Base de r√©sultats de recherche simul√©s avec contenu d√©taill√©
  let enhancedResults = [];
  
  // R√©sultats pour recettes
  if (keywords.some(k => ['recette', 'recettes', 'prot√©in√©e', 'musculation', 'prise', 'masse'].includes(k))) {
    enhancedResults = [
      {
        title: 'Recette compl√®te : Bol de quinoa au poulet grill√© et l√©gumes',
        snippet: 'Ingr√©dients : 200g de quinoa, 150g de blanc de poulet, brocolis, courgettes. Pr√©paration en 25 minutes. Riche en prot√©ines (35g) et √©quilibr√© en nutriments (520 calories). √âtapes d√©taill√©es de cuisson et assaisonnement.',
        link: 'https://marmiton.org/recettes/recette_bol-quinoa-poulet_123456.aspx',
        displayLink: 'marmiton.org',
        pagemap: {
          cse_image: [{ src: 'https://source.unsplash.com/300x200/?quinoa+chicken+bowl' }]
        },
        category: 'muscle_gain'
      },
      {
        title: 'Shake prot√©in√© post-entra√Ænement : banane, avoine et whey',
        snippet: 'Ingr√©dients : 1 banane, 40g de flocons d\'avoine, 30g de whey prot√©ine, 300ml de lait. Mixez 2 minutes. Parfait apr√®s l\'entra√Ænement avec 42g de prot√©ines et 580 calories. Recette simple et efficace pour la r√©cup√©ration.',
        link: 'https://750g.com/shake-proteine-banane-avoine-p678901.htm',
        displayLink: '750g.com',
        pagemap: {
          cse_image: [{ src: 'https://source.unsplash.com/300x200/?protein+shake+banana' }]
        },
        category: 'muscle_gain'
      },
      {
        title: 'Saumon grill√© aux √©pinards et patate douce - Programme musculation',
        snippet: 'Ingr√©dients : 180g de filet de saumon, 200g de patate douce, √©pinards frais. Cuisson 20 minutes au four. Excellent pour la prise de masse avec 38g de prot√©ines, acides gras om√©ga-3 et 485 calories par portion.',
        link: 'https://cuisineaz.com/recettes/saumon-patate-douce-musculation-789012.aspx',
        displayLink: 'cuisineaz.com',
        pagemap: {
          cse_image: [{ src: 'https://source.unsplash.com/300x200/?salmon+sweet+potato' }]
        },
        category: 'muscle_gain'
      }
    ];
  }
  
  // R√©sultats pour programmes d'entra√Ænement
  else if (keywords.some(k => ['programme', 'musculation', 'entra√Ænement', 'exercices', 'salle', 'maison'].includes(k))) {
    enhancedResults = [
      {
        title: 'Programme complet prise de masse - 4 s√©ances par semaine',
        snippet: 'Programme d√©taill√© : Jour 1 Pectoraux/Triceps (d√©velopp√© couch√© 4x8-10, dips 3x12), Jour 2 Dos/Biceps (tractions 4x8, rowing barre 4x10). Progression sur 8 semaines avec s√©ries, r√©p√©titions et temps de repos pr√©cis.',
        link: 'https://all-musculation.com/programme-prise-masse-debutant-456789.html',
        displayLink: 'all-musculation.com',
        pagemap: {
          cse_image: [{ src: 'https://source.unsplash.com/300x200/?gym+workout+program' }]
        },
        category: 'muscle_gain'
      },
      {
        title: 'Entra√Ænement maison sans mat√©riel - Programme d√©butant',
        snippet: 'Exercices au poids du corps : Pompes 4 s√©ries de 12-15, Squats 4 s√©ries de 20, Planche 3x45s, Mountain climbers 3x30s. Programme 3 fois par semaine, progression graduelle, dur√©e 45 minutes par s√©ance.',
        link: 'https://musculation.com/entrainement-maison-poids-corps-234567.php',
        displayLink: 'musculation.com',
        pagemap: {
          cse_image: [{ src: 'https://source.unsplash.com/300x200/?home+bodyweight+workout' }]
        },
        category: 'home_workout'
      },
      {
        title: 'Routine split haut/bas du corps - Salle de sport',
        snippet: 'Split training efficace : Haut du corps (d√©velopp√© inclin√© 4x8, rowing T-bar 4x10, d√©velopp√© militaire 3x12), Bas du corps (squat 4x8-12, leg press 3x15, extension mollets 4x20). S√©ances de 60-75 minutes.',
        link: 'https://superphysique.org/routine-split-haut-bas-345678.html',
        displayLink: 'superphysique.org',
        pagemap: {
          cse_image: [{ src: 'https://source.unsplash.com/300x200/?gym+split+training' }]
        },
        category: 'muscle_gain'
      }
    ];
  }
  
  // R√©sultats g√©n√©raux adapt√©s √† l'objectif
  else {
    enhancedResults = [
      {
        title: 'Guide complet nutrition et entra√Ænement pour la forme',
        snippet: 'Programme holistique combinant nutrition √©quilibr√©e et exercices adapt√©s. Planification des repas avec macronutriments, routines d\'entra√Ænement progressives, conseils de r√©cup√©ration et suivi des progr√®s.',
        link: 'https://exemple.com/guide-nutrition-entrainement',
        displayLink: 'exemple.com',
        pagemap: {
          cse_image: [{ src: 'https://source.unsplash.com/300x200/?fitness+nutrition' }]
        },
        category: 'general'
      }
    ];
  }
  
  // Adapter les r√©sultats selon l'objectif utilisateur
  if (userGoal === 'lose_weight') {
    enhancedResults = enhancedResults.map(result => ({
      ...result,
      snippet: result.snippet.replace(/prise de masse/g, 'perte de poids').replace(/musculation/g, 'cardio fitness'),
      category: 'weight_loss'
    }));
  }
  
  return enhancedResults;
}

// G√©n√©rer des recettes de fallback bas√©es sur les crit√®res
function generateFallbackRecipes(criteria) {
  const { dietType, cookingTime } = criteria;
  const baseRecipes = [
    { 
      id: Date.now() + 1,
      name: 'Salade de quinoa m√©diterran√©enne',
      description: 'Salade l√©g√®re et prot√©in√©e parfaite pour un repas √©quilibr√©.',
      calories: 320, 
      protein: 18, 
      time: 15,
      image: 'https://source.unsplash.com/300x200/?quinoa+salad',
      source: 'https://exemple.com/salade-quinoa'
    },
    { 
      id: Date.now() + 2,
      name: 'Bowl de l√©gumes et tofu grill√©',
      description: 'Un repas complet riche en prot√©ines v√©g√©tales et en fibres.',
      calories: 380, 
      protein: 22, 
      time: 20,
      image: 'https://source.unsplash.com/300x200/?tofu+bowl',
      source: 'https://exemple.com/bowl-tofu'
    },
    { 
      id: Date.now() + 3,
      name: 'Poulet marin√© aux herbes et l√©gumes r√¥tis',
      description: 'Un plat savoureux et riche en prot√©ines id√©al pour les sportifs.',
      calories: 450, 
      protein: 35, 
      time: 35,
      image: 'https://source.unsplash.com/300x200/?chicken+vegetables',
      source: 'https://exemple.com/poulet-legumes'
    }
  ];
  
  // Adapter les recettes au r√©gime alimentaire
  let adaptedRecipes = [...baseRecipes];
  if (dietType === 'vegetarian' || dietType === 'vegan') {
    adaptedRecipes = adaptedRecipes.map(recipe => {
      if (recipe.name.includes('Poulet')) {
        return {
          ...recipe,
          name: recipe.name.replace('Poulet', 'Tempeh'),
          description: recipe.description.replace('poulet', 'tempeh').replace('prot√©ines', 'prot√©ines v√©g√©tales'),
          protein: Math.round(recipe.protein * 0.8),
          image: 'https://source.unsplash.com/300x200/?tempeh+vegetables'
        };
      }
      return recipe;
    });
  }
  
  // Filtrer par temps de pr√©paration si n√©cessaire
  if (cookingTime === 'quick') {
    adaptedRecipes = adaptedRecipes.filter(recipe => recipe.time <= 20);
  }
  
  return adaptedRecipes;
}

// Fonctions d'extraction intelligente de contenu
const extractRecipeData = (searchResult) => {
  const { title, snippet, link } = searchResult;
  const text = (title + ' ' + snippet).toLowerCase();
  
  // Extraction des ingr√©dients principaux
  const ingredients = [];
  const ingredientPatterns = [
    /(\d+g?\s*(?:de\s+)?(?:poulet|b≈ìuf|porc|saumon|thon|≈ìufs?|quinoa|riz|p√¢tes|lentilles|haricots))/gi,
    /(poulet|b≈ìuf|porc|saumon|thon|≈ìufs?|quinoa|riz|p√¢tes|lentilles|haricots)/gi
  ];
  
  ingredientPatterns.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      matches.forEach(match => {
        if (!ingredients.includes(match.toLowerCase())) {
          ingredients.push(match.toLowerCase());
        }
      });
    }
  });
  
  // Extraction des informations nutritionnelles
  const nutritionInfo = {
    calories: extractNutritionalValue(text, /(\d+)\s*(?:kcal|calories?)/i, 400, 800),
    protein: extractNutritionalValue(text, /(\d+)\s*g\s*(?:de\s+)?prot[√©e√®]ines?/i, 20, 50),
    prepTime: extractPreparationTime(text)
  };
  
  // D√©tection du type de plat
  const dishType = detectDishType(text);
  
  // Score de qualit√© bas√© sur la pertinence du contenu
  const qualityScore = calculateRecipeQuality(text, ingredients.length, nutritionInfo);
  
  return {
    id: `recipe-extracted-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    name: cleanRecipeTitle(title),
    description: cleanRecipeDescription(snippet),
    source: link,
    calories: nutritionInfo.calories,
    protein: nutritionInfo.protein,
    time: nutritionInfo.prepTime,
    ingredients: ingredients.slice(0, 5), // Limiter √† 5 ingr√©dients principaux
    dishType: dishType,
    qualityScore: qualityScore,
    image: searchResult.pagemap?.cse_image?.[0]?.src || generateFoodImage(dishType),
    extractedFrom: 'web_search'
  };
};

const extractWorkoutData = (searchResult) => {
  const { title, snippet, link } = searchResult;
  const text = (title + ' ' + snippet).toLowerCase();
  
  // Extraction des exercices mentionn√©s
  const exercises = [];
  const exercisePatterns = [
    /(squat|pompes?|tractions?|d√©velopp√©|curl|rowing|dips|planche|burpees?|fentes?)/gi,
    /(\d+\s*(?:s√©ries?|sets?)\s*(?:de\s*)?(?:\d+\s*)?(?:r√©p√©titions?|reps?))/gi
  ];
  
  exercisePatterns.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      matches.forEach(match => {
        if (!exercises.includes(match.toLowerCase())) {
          exercises.push(match.toLowerCase());
        }
      });
    }
  });
  
  // Extraction des informations d'entra√Ænement
  const workoutInfo = {
    duration: extractWorkoutDuration(text),
    level: extractWorkoutLevel(text),
    equipment: extractRequiredEquipment(text),
    muscleGroups: extractTargetMuscles(text)
  };
  
  // Score de qualit√© bas√© sur la pertinence du contenu
  const qualityScore = calculateWorkoutQuality(text, exercises.length, workoutInfo);
  
  return {
    id: `workout-extracted-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    title: cleanWorkoutTitle(title),
    description: cleanWorkoutDescription(snippet),
    source: link,
    duration: workoutInfo.duration,
    level: workoutInfo.level,
    equipment: workoutInfo.equipment,
    exercises: exercises.slice(0, 8), // Limiter √† 8 exercices principaux
    muscleGroups: workoutInfo.muscleGroups,
    qualityScore: qualityScore,
    extractedFrom: 'web_search'
  };
};

// Fonctions utilitaires d'extraction
const extractNutritionalValue = (text, pattern, minValue, maxValue) => {
  const match = text.match(pattern);
  if (match && match[1]) {
    const value = parseInt(match[1], 10);
    return Math.min(Math.max(value, minValue), maxValue);
  }
  return Math.floor(Math.random() * (maxValue - minValue)) + minValue;
};

const extractPreparationTime = (text) => {
  const timePatterns = [
    /(\d+)\s*(?:minutes?|min)/i,
    /(\d+)\s*h/i
  ];
  
  for (const pattern of timePatterns) {
    const match = text.match(pattern);
    if (match && match[1]) {
      let time = parseInt(match[1], 10);
      if (pattern.source.includes('h')) time *= 60; // Convertir heures en minutes
      return Math.min(time, 120); // Maximum 2 heures
    }
  }
  
  return Math.floor(Math.random() * 30) + 15; // 15-45 minutes par d√©faut
};

const extractWorkoutDuration = (text) => {
  const durationPatterns = [
    /(\d+)\s*(?:minutes?|min)/i,
    /(\d+)\s*h/i,
    /(45|60|90)\s*(?:minutes?|min)/i
  ];
  
  for (const pattern of durationPatterns) {
    const match = text.match(pattern);
    if (match && match[1]) {
      let duration = parseInt(match[1], 10);
      if (pattern.source.includes('h')) duration *= 60;
      return Math.min(duration, 150); // Maximum 2h30
    }
  }
  
  return Math.floor(Math.random() * 30) + 45; // 45-75 minutes par d√©faut
};

const extractWorkoutLevel = (text) => {
  if (text.includes('d√©butant') || text.includes('facile') || text.includes('novice')) {
    return 'd√©butant';
  } else if (text.includes('avanc√©') || text.includes('expert') || text.includes('confirm√©')) {
    return 'avanc√©';
  } else if (text.includes('interm√©diaire') || text.includes('moyen')) {
    return 'interm√©diaire';
  }
  return 'interm√©diaire'; // Valeur par d√©faut
};

const extractRequiredEquipment = (text) => {
  const equipmentKeywords = ['halt√®res', 'barre', 'banc', 'machine', '√©lastique', 'kettlebell', 'aucun', 'poids du corps'];
  const foundEquipment = equipmentKeywords.filter(eq => text.includes(eq.toLowerCase()));
  return foundEquipment.length > 0 ? foundEquipment.join(', ') : 'Aucun √©quipement sp√©cifi√©';
};

const extractTargetMuscles = (text) => {
  const muscleKeywords = ['pectoraux', 'dos', 'jambes', '√©paules', 'bras', 'abdominaux', 'fessiers', 'triceps', 'biceps'];
  const foundMuscles = muscleKeywords.filter(muscle => text.includes(muscle.toLowerCase()));
  return foundMuscles.slice(0, 4); // Limiter √† 4 groupes musculaires
};

const detectDishType = (text) => {
  if (text.includes('salade') || text.includes('crudit√©s')) return 'salade';
  if (text.includes('soupe') || text.includes('velout√©')) return 'soupe';
  if (text.includes('plat principal') || text.includes('viande') || text.includes('poisson')) return 'plat principal';
  if (text.includes('smoothie') || text.includes('shake') || text.includes('boisson')) return 'boisson';
  if (text.includes('dessert') || text.includes('g√¢teau')) return 'dessert';
  return 'plat principal';
};

const calculateRecipeQuality = (text, ingredientCount, nutritionInfo) => {
  let score = 0;
  
  // Points pour les ingr√©dients d√©tect√©s
  score += ingredientCount * 10;
  
  // Points pour les informations nutritionnelles
  if (nutritionInfo.calories > 0) score += 20;
  if (nutritionInfo.protein > 0) score += 20;
  if (nutritionInfo.prepTime > 0) score += 15;
  
  // Points pour les mots-cl√©s de qualit√©
  const qualityKeywords = ['recette', 'ingr√©dients', 'pr√©paration', '√©tapes', 'cuisson'];
  qualityKeywords.forEach(keyword => {
    if (text.includes(keyword)) score += 5;
  });
  
  return Math.min(score, 100);
};

const calculateWorkoutQuality = (text, exerciseCount, workoutInfo) => {
  let score = 0;
  
  // Points pour les exercices d√©tect√©s
  score += exerciseCount * 8;
  
  // Points pour les informations d'entra√Ænement
  if (workoutInfo.duration > 0) score += 15;
  if (workoutInfo.level !== 'interm√©diaire') score += 10; // Bonus pour niveau sp√©cifique
  if (workoutInfo.equipment !== 'Aucun √©quipement sp√©cifi√©') score += 10;
  if (workoutInfo.muscleGroups.length > 0) score += 15;
  
  // Points pour les mots-cl√©s de qualit√©
  const qualityKeywords = ['programme', 'exercices', 's√©ries', 'r√©p√©titions', 'entra√Ænement'];
  qualityKeywords.forEach(keyword => {
    if (text.includes(keyword)) score += 6;
  });
  
  return Math.min(score, 100);
};

const cleanRecipeTitle = (title) => {
  return title
    .replace(/\s*-\s*.*$/, '') // Enlever le suffixe apr√®s le tiret
    .replace(/^\[.*?\]\s*/, '') // Enlever les pr√©fixes entre crochets
    .trim();
};

const cleanRecipeDescription = (description) => {
  return description
    .replace(/\.\.\.$/, '') // Enlever les points de suspension finaux
    .replace(/^.*?:\s*/, '') // Enlever le pr√©fixe avant les deux points
    .trim();
};

const cleanWorkoutTitle = (title) => {
  return title
    .replace(/\s*-\s*.*$/, '')
    .replace(/^\[.*?\]\s*/, '')
    .trim();
};

const cleanWorkoutDescription = (description) => {
  return description
    .replace(/\.\.\.$/, '')
    .replace(/^.*?:\s*/, '')
    .trim();
};

const generateFoodImage = (dishType) => {
  const imageMap = {
    'salade': 'https://source.unsplash.com/300x200/?healthy+salad',
    'soupe': 'https://source.unsplash.com/300x200/?soup',
    'plat principal': 'https://source.unsplash.com/300x200/?healthy+meal',
    'boisson': 'https://source.unsplash.com/300x200/?protein+smoothie',
    'dessert': 'https://source.unsplash.com/300x200/?healthy+dessert'
  };
  return imageMap[dishType] || 'https://source.unsplash.com/300x200/?healthy+food';
};

// Services API pour les fonctionnalit√©s de l'application
export const apiService = {
  // Authentification
  auth: {
    login: (credentials) => api.post('/auth/login', credentials),
    register: (userData) => api.post('/auth/register', userData),
    logout: () => api.post('/auth/logout'),
    resetPassword: (email) => api.post('/auth/reset-password', { email }),
  },
  
  // Programmes d'entra√Ænement
  workouts: {
    getAll: () => {
      // En d√©veloppement, simuler les donn√©es
      if (process.env.NODE_ENV === 'development') {
        return Promise.resolve({ data: [] });
      }
      return api.get('/workouts');
    },
    getById: (id) => {
      // En d√©veloppement, simuler les donn√©es
      if (process.env.NODE_ENV === 'development') {
        return Promise.resolve({ data: null });
      }
      return api.get(`/workouts/${id}`);
    },
    create: (workout) => api.post('/workouts', workout),
    update: (id, workout) => api.put(`/workouts/${id}`, workout),
    delete: (id) => api.delete(`/workouts/${id}`),
    search: (params) => webSearchService.searchWorkoutPrograms(params)
  },
  
  // Nutrition
  nutrition: {
    getPlans: () => {
      // En d√©veloppement, simuler les donn√©es
      if (process.env.NODE_ENV === 'development') {
        return Promise.resolve({ data: [] });
      }
      return api.get('/nutrition/plans');
    },
    getPlanById: (id) => {
      // En d√©veloppement, simuler les donn√©es
      if (process.env.NODE_ENV === 'development') {
        return Promise.resolve({ data: null });
      }
      return api.get(`/nutrition/plans/${id}`);
    },
    createPlan: (plan) => api.post('/nutrition/plans', plan),
    updatePlan: (id, plan) => api.put(`/nutrition/plans/${id}`, plan),
    deletePlan: (id) => api.delete(`/nutrition/plans/${id}`),
    searchRecipes: (params) => webSearchService.searchNutritionPlans(params),
    getMassGainRecipes: () => webSearchService.searchMassGainRecipes()
  },
  
  // Profil utilisateur
  user: {
    getProfile: () => api.get('/user/profile'),
    updateProfile: (profile) => api.put('/user/profile', profile),
    updateSettings: (settings) => api.put('/user/settings', settings),
    uploadAvatar: (formData) => api.post('/user/avatar', formData, {
      headers: { 'Content-Type': 'multipart/form-data' }
    }),
  },
  
  // Statistiques et suivi
  tracking: {
    getStats: () => api.get('/tracking/stats'),
    logWorkout: (data) => api.post('/tracking/workouts', data),
    logMeal: (data) => api.post('/tracking/meals', data),
    getActivityHistory: (params) => api.get('/tracking/history', { params }),
  }
};

// Fonctions utilitaires pour estimer les valeurs nutritionnelles
function estimateCalories(title, description, calorieLevel = null) {
  // Extraction si mentionn√© explicitement (ex: "250 calories")
  const caloriesMatch = (title + ' ' + description).match(/(\d+)\s*calories/i);
  if (caloriesMatch) {
    return parseInt(caloriesMatch[1], 10);
  }
  
  // Si on sp√©cifie explicitement un niveau calorique
  if (calorieLevel === 'high') {
    return Math.floor(Math.random() * 300) + 500; // 500-800 calories (repas riche)
  } else if (calorieLevel === 'low') {
    return Math.floor(Math.random() * 100) + 200; // 200-300 calories (repas l√©ger)
  } else if (calorieLevel === 'medium') {
    return Math.floor(Math.random() * 150) + 350; // 350-500 calories (repas standard)
  }
  
  // Estimation bas√©e sur les mots-cl√©s
  const text = (title + ' ' + description).toLowerCase();
  if (text.includes('l√©ger') || text.includes('di√®te') || text.includes('minceur')) {
    return Math.floor(Math.random() * 100) + 150; // 150-250 calories
  } else if (text.includes('dessert') || text.includes('g√¢teau')) {
    return Math.floor(Math.random() * 200) + 300; // 300-500 calories
  } else if (text.includes('prot√©in√©') || text.includes('masse') || text.includes('riche')) {
    return Math.floor(Math.random() * 250) + 450; // 450-700 calories
  } else {
    return Math.floor(Math.random() * 200) + 250; // 250-450 calories (repas standard)
  }
}

function estimateProtein(title, description, proteinLevel = null) {
  // Extraction si mentionn√© explicitement (ex: "20g de prot√©ines")
  const proteinMatch = (title + ' ' + description).match(/(\d+)\s*g\s*(?:de)?\s*prot[√©e√®]ines?/i);
  if (proteinMatch) {
    return parseInt(proteinMatch[1], 10);
  }
  
  // Si on sp√©cifie explicitement un niveau prot√©ique
  if (proteinLevel === 'high') {
    return Math.floor(Math.random() * 15) + 30; // 30-45g (tr√®s riche en prot√©ines)
  } else if (proteinLevel === 'medium') {
    return Math.floor(Math.random() * 10) + 20; // 20-30g (moyennement riche)
  } else if (proteinLevel === 'low') {
    return Math.floor(Math.random() * 10) + 10; // 10-20g (faible en prot√©ines)
  }
  
  // Estimation bas√©e sur les mots-cl√©s
  const text = (title + ' ' + description).toLowerCase();
  if (text.includes('poulet') || text.includes('b≈ìuf') || text.includes('viande') || 
      text.includes('prot√©ine') || text.includes('prot√©in√©')) {
    return Math.floor(Math.random() * 10) + 20; // 20-30g (riche en prot√©ines)
  } else if (text.includes('poisson') || text.includes('≈ìuf') || text.includes('l√©gumineuse') ||
            text.includes('tofu') || text.includes('lentille') || text.includes('haricot')) {
    return Math.floor(Math.random() * 10) + 15; // 15-25g (moyennement riche en prot√©ines)
  } else {
    return Math.floor(Math.random() * 10) + 5; // 5-15g (faible en prot√©ines)
  }
}

function estimateCookingTime(title, description, cookingTimePreference) {
  // Extraction si mentionn√© explicitement (ex: "pr√™t en 15 minutes")
  const timeMatch = (title + ' ' + description).match(/(\d+)\s*min/i);
  if (timeMatch) {
    return parseInt(timeMatch[1], 10);
  }
  
  // Estimation bas√©e sur la pr√©f√©rence utilisateur et les mots-cl√©s
  if (cookingTimePreference === 'quick' || description.includes('rapide') || description.includes('express')) {
    return Math.floor(Math.random() * 10) + 10; // 10-20 minutes
  } else if (cookingTimePreference === 'medium' || description.includes('simple')) {
    return Math.floor(Math.random() * 15) + 20; // 20-35 minutes
  } else {
    return Math.floor(Math.random() * 20) + 35; // 35-55 minutes (plats √©labor√©s)
  }
}

function determineLevel(title, description, activityLevel = null) {
  const text = (title + ' ' + description).toLowerCase();
  
  // Si le niveau d'activit√© est explicitement fourni, l'utiliser comme base
  if (activityLevel) {
    // Mais v√©rifier si le texte contredit explicitement ce niveau
    if (activityLevel === 'beginner' && (text.includes('avanc√©') || text.includes('expert'))) {
      return 'Interm√©diaire'; // Compromis entre le niveau utilisateur et le contenu
    } else if (activityLevel === 'advanced' && text.includes('d√©butant')) {
      return 'Interm√©diaire'; // Compromis entre le niveau utilisateur et le contenu
    } else {
      // Sinon utiliser le niveau d'activit√© de l'utilisateur
      return activityLevel === 'beginner' ? 'D√©butant' : 
             activityLevel === 'advanced' ? 'Avanc√©' : 'Interm√©diaire';
    }
  }
  
  // Analyse bas√©e uniquement sur le texte si pas de niveau fourni
  if (text.includes('d√©butant') || text.includes('facile') || text.includes('simple')) {
    return 'D√©butant';
  } else if (text.includes('avanc√©') || text.includes('intense') || text.includes('difficile')) {
    return 'Avanc√©';
  } else {
    return 'Interm√©diaire';
  }
}

function determineDuration(title, description) {
  const text = (title + ' ' + description).toLowerCase();
  
  // Chercher des dur√©es explicites (ex: "programme de 4 semaines")
  const durationMatch = text.match(/(\d+)\s*semaines?/i);
  if (durationMatch) {
    return `${durationMatch[1]} semaines`;
  }
  
  // Estimation bas√©e sur les mots-cl√©s
  if (text.includes('court') || text.includes('rapide') || text.includes('express')) {
    return '2 semaines';
  } else if (text.includes('long') || text.includes('complet') || text.includes('transformation')) {
    return '8 semaines';
  } else {
    return '4 semaines';
  }
}

export default api;